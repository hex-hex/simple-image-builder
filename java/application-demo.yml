# 项目相关配置
jxbd:
    # 文件路径 示例（ Windows配置D:/jxbd/uploadPath，Linux配置 /home/jxbd/uploadPath）
  profile: D:/jxbd/uploadPath
  # 是否输出错误信息到前端，生产环境请设置为false
  showError: true

# 开发环境配置
server:
  # 服务器的HTTP端口，默认为8080
  port: 8088
  servlet:
    # 应用的访问路径
    context-path: /skxt-api

# 数据源配置
spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driverClassName: org.postgresql.Driver
    druid:
      # 主库数据源
      master:
        url: jdbc:postgresql://postgres-test:5432/cfg_crm_v4?stringtype=unspecified
        username: postgres
        password: postgres
        validationQuery: SELECT 1
#      master:
#        url: jdbc:mysql://localhost:3306/skxt?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
#        username: root
#        password: root
      # 从库数据源
      slave:
        # 从数据源开关/默认关闭
        enabled: false
        url:
        username:
        password:
      # 初始连接数
      initialSize: 2
      # 最小连接池数量
      minIdle: 3
      # 最大连接池数量
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#      timeBetweenEvictionRunsMillis: 60000
      timeBetweenEvictionRunsMillis: 90000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      # 配置一个连接在池中最大空闲的时间，单位是毫秒
#      maxEvictableIdleTimeMillis: 900000
      maxEvictableIdleTimeMillis: 1800000
      # 配置检测连接是否有效
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      webStatFilter:
        enabled: true
      statViewServlet:
        enabled: true
        # 设置白名单，不填则允许所有访问
        allow:
        url-pattern: /druid/*
        # 控制台管理用户名和密码
        login-username: jxbd
        login-password: 123456
      filter:
        stat:
          enabled: true
          # 慢SQL记录
          log-slow-sql: true
          slow-sql-millis: 1000
          merge-sql: true
        wall:
          config:
            multi-statement-allow: true
  # redis 配置
  redis:
    # 地址
    host: redis-test
    # 端口，默认为6379
    port: 6379
    # 数据库索引
    database: 0
    #redis缓存前缀，一般用项目名
    prefix: ${server.servlet.context-path}
    # 密码
    password: ""
    # 连接超时时间
    timeout: 10s
# 注解方式缓存时的过期时间，单位：小时
    entry-ttl: 6
    lettuce:
      pool:
        # 连接池中的最小空闲连接
        min-idle: 0
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池的最大数据库连接数
        max-active: 8
        # #连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms
  # kafka
  kafka:
    bootstrap-servers: localhost:9092
    # producer 生产者
    producer:
      # 重试次数
      retries: 0
      # 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
      acks: all
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: community-consumer-group

# 防御跨站点请求伪造
csrf:
  # 排除链接（多个用逗号分隔）
  verifyReferer: localhost,127.0.0.1,trader-test.cfg-global.com
  # 过滤开关
  enabled: true

# 登录相关配置
login:
  #  是否限制单用户登录
  single-login: true

# 企业微信配置
wework:
  #企业id
  corpid: 343434
  #应用secret
  corpsecret: 343--34
  #应用id
  agentid: 25325
  #企业微信打卡应用secret
  checkinCorpsecret: 45435-Tb92IfU

# 微信公众号
weixin:
  appId: wx0c34ab3a8191bec6
  secret: ceb36e709003acbdb9be9a9534a1b868
  # （这个不配也没啥问题）Token可由开发者可以任意填写，用作生成签名，验证消息的确来自微信服务器
  token: test

#铭源接口调用
cfg:
  baseUrl: https://dev.cfg-global.com